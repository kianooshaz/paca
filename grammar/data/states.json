{
    "0.kernel": [
        {
            "Lookahead": "0.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "$",
            "Production": "P' -> . P"
        }
    ],
    "1.kernel": [
        {
            "Lookahead": "1.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "$",
            "Production": "P' -> P ."
        }
    ],
    "2.kernel": [
        {
            "Lookahead": "2.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "$",
            "Production": "P -> program . id output ; declarations subprogram_declaration begin optional_statment end."
        }
    ],
    "3.kernel": [
        {
            "Lookahead": "3.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "$",
            "Production": "P -> program id . output ; declarations subprogram_declaration begin optional_statment end."
        }
    ],
    "3.epsilon": [
        {
            "Lookahead": "3.epsilon",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ";",
            "Production": "output -> ."
        }
    ],
    "4.kernel": [
        {
            "Lookahead": "4.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "$",
            "Production": "P -> program id output . ; declarations subprogram_declaration begin optional_statment end."
        }
    ],
    "5.kernel": [
        {
            "Lookahead": "5.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ";",
            "Production": "output -> ( . id_list )"
        }
    ],
    "6.kernel": [
        {
            "Lookahead": "6.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "$",
            "Production": "P -> program id output ; . declarations subprogram_declaration begin optional_statment end."
        }
    ],
    "6.epsilon": [
        {
            "Lookahead": "6.epsilon",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "function procedure begin var",
            "Production": "declarations -> ."
        }
    ],
    "7.kernel": [
        {
            "Lookahead": "7.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ";",
            "Production": "output -> ( id_list . )"
        },
        {
            "Lookahead": ") ,",
            "Production": "id_list -> id_list . , id"
        }
    ],
    "8.kernel": [
        {
            "Lookahead": "8.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ") , :",
            "Production": "id_list -> id ."
        }
    ],
    "9.kernel": [
        {
            "Lookahead": "9.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "$",
            "Production": "P -> program id output ; declarations . subprogram_declaration begin optional_statment end."
        },
        {
            "Lookahead": "function procedure begin var",
            "Production": "declarations -> declarations . var id_list : type ;"
        }
    ],
    "9.epsilon": [
        {
            "Lookahead": "9.epsilon",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "begin",
            "Production": "subprogram_declaration -> ."
        }
    ],
    "10.kernel": [
        {
            "Lookahead": "10.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ") , :",
            "Production": "id_list -> id_list , . id"
        }
    ],
    "11.kernel": [
        {
            "Lookahead": "11.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ";",
            "Production": "output -> ( id_list ) ."
        }
    ],
    "12.kernel": [
        {
            "Lookahead": "12.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "function procedure begin var",
            "Production": "declarations -> declarations var . id_list : type ;"
        }
    ],
    "13.kernel": [
        {
            "Lookahead": "13.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "$",
            "Production": "P -> program id output ; declarations subprogram_declaration . begin optional_statment end."
        }
    ],
    "14.kernel": [
        {
            "Lookahead": "14.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "begin ;",
            "Production": "subprogram_declaration -> subprogram_declarations . subprogram_declaration ;"
        }
    ],
    "14.epsilon": [
        {
            "Lookahead": "14.epsilon",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ";",
            "Production": "subprogram_declaration -> ."
        }
    ],
    "15.kernel": [
        {
            "Lookahead": "15.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "function procedure ;",
            "Production": "subprogram_declarations -> supprogram_head . declarations compound_statment"
        }
    ],
    "15.epsilon": [
        {
            "Lookahead": "15.epsilon",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "begin var",
            "Production": "declarations -> ."
        }
    ],
    "16.kernel": [
        {
            "Lookahead": "16.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "var begin",
            "Production": "supprogram_head -> function . id arguments : standard_type ;"
        }
    ],
    "17.kernel": [
        {
            "Lookahead": "17.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "var begin",
            "Production": "supprogram_head -> procedure . id arguments ;"
        }
    ],
    "18.kernel": [
        {
            "Lookahead": "18.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ") , :",
            "Production": "id_list -> id_list , id ."
        }
    ],
    "19.kernel": [
        {
            "Lookahead": "19.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "function procedure begin var",
            "Production": "declarations -> declarations var id_list . : type ;"
        },
        {
            "Lookahead": ": ,",
            "Production": "id_list -> id_list . , id"
        }
    ],
    "20.kernel": [
        {
            "Lookahead": "20.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "$",
            "Production": "P -> program id output ; declarations subprogram_declaration begin . optional_statment end."
        }
    ],
    "20.epsilon": [
        {
            "Lookahead": "20.epsilon",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end.",
            "Production": "optional_statment -> ."
        }
    ],
    "21.kernel": [
        {
            "Lookahead": "21.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "begin ;",
            "Production": "subprogram_declaration -> subprogram_declarations subprogram_declaration . ;"
        }
    ],
    "22.kernel": [
        {
            "Lookahead": "22.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "function procedure ;",
            "Production": "subprogram_declarations -> supprogram_head declarations . compound_statment"
        },
        {
            "Lookahead": "begin var",
            "Production": "declarations -> declarations . var id_list : type ;"
        }
    ],
    "23.kernel": [
        {
            "Lookahead": "23.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "var begin",
            "Production": "supprogram_head -> function id . arguments : standard_type ;"
        }
    ],
    "23.epsilon": [
        {
            "Lookahead": "23.epsilon",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ":",
            "Production": "arguments -> ."
        }
    ],
    "24.kernel": [
        {
            "Lookahead": "24.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "var begin",
            "Production": "supprogram_head -> procedure id . arguments ;"
        }
    ],
    "24.epsilon": [
        {
            "Lookahead": "24.epsilon",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ";",
            "Production": "arguments -> ."
        }
    ],
    "25.kernel": [
        {
            "Lookahead": "25.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "function procedure begin var",
            "Production": "declarations -> declarations var id_list : . type ;"
        }
    ],
    "26.kernel": [
        {
            "Lookahead": "26.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "$",
            "Production": "P -> program id output ; declarations subprogram_declaration begin optional_statment . end."
        }
    ],
    "27.kernel": [
        {
            "Lookahead": "27.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. end ;",
            "Production": "optional_statment -> statment_list ."
        },
        {
            "Lookahead": "end. ; end",
            "Production": "statment_list -> statment_list . ; optional_statment"
        }
    ],
    "28.kernel": [
        {
            "Lookahead": "28.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end",
            "Production": "statment_list -> statment ."
        }
    ],
    "29.kernel": [
        {
            "Lookahead": "29.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> varible . := expr"
        }
    ],
    "30.kernel": [
        {
            "Lookahead": "30.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> procedure_statment ."
        }
    ],
    "31.kernel": [
        {
            "Lookahead": "31.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> compound_statment ."
        }
    ],
    "32.kernel": [
        {
            "Lookahead": "32.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> if . expr then statment"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> if . expr then statment else statment"
        }
    ],
    "33.kernel": [
        {
            "Lookahead": "33.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> while . expr do statment"
        }
    ],
    "34.kernel": [
        {
            "Lookahead": "34.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> for . varible := expr st_for st_for2 do statment"
        }
    ],
    "35.kernel": [
        {
            "Lookahead": "35.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ":=",
            "Production": "varible -> id ."
        },
        {
            "Lookahead": ":=",
            "Production": "varible -> id . [ expr ]"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "procedure_statment -> id ."
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "procedure_statment -> id . ( expr_list )"
        }
    ],
    "36.kernel": [
        {
            "Lookahead": "36.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; function procedure end else",
            "Production": "compound_statment -> begin . optional_statment end"
        }
    ],
    "36.epsilon": [
        {
            "Lookahead": "36.epsilon",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end",
            "Production": "optional_statment -> ."
        }
    ],
    "37.kernel": [
        {
            "Lookahead": "37.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "begin ;",
            "Production": "subprogram_declaration -> subprogram_declarations subprogram_declaration ; ."
        }
    ],
    "38.kernel": [
        {
            "Lookahead": "38.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "function procedure ;",
            "Production": "subprogram_declarations -> supprogram_head declarations compound_statment ."
        }
    ],
    "39.kernel": [
        {
            "Lookahead": "39.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "var begin",
            "Production": "supprogram_head -> function id arguments . : standard_type ;"
        }
    ],
    "40.kernel": [
        {
            "Lookahead": "40.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ": ;",
            "Production": "arguments -> ( . parameter_list )"
        }
    ],
    "41.kernel": [
        {
            "Lookahead": "41.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "var begin",
            "Production": "supprogram_head -> procedure id arguments . ;"
        }
    ],
    "42.kernel": [
        {
            "Lookahead": "42.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "function procedure begin var",
            "Production": "declarations -> declarations var id_list : type . ;"
        }
    ],
    "43.kernel": [
        {
            "Lookahead": "43.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "; )",
            "Production": "type -> standard_type ."
        }
    ],
    "44.kernel": [
        {
            "Lookahead": "44.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "; )",
            "Production": "type -> array . [ int .. int ] of standard_type"
        }
    ],
    "45.kernel": [
        {
            "Lookahead": "45.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "; )",
            "Production": "standard_type -> integer ."
        }
    ],
    "46.kernel": [
        {
            "Lookahead": "46.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "; )",
            "Production": "standard_type -> real ."
        }
    ],
    "47.kernel": [
        {
            "Lookahead": "47.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "; )",
            "Production": "standard_type -> string ."
        }
    ],
    "48.kernel": [
        {
            "Lookahead": "48.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "; )",
            "Production": "standard_type -> boolean ."
        }
    ],
    "49.kernel": [
        {
            "Lookahead": "49.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "$",
            "Production": "P -> program id output ; declarations subprogram_declaration begin optional_statment end. ."
        }
    ],
    "50.kernel": [
        {
            "Lookahead": "50.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end",
            "Production": "statment_list -> statment_list ; . optional_statment"
        }
    ],
    "50.epsilon": [
        {
            "Lookahead": "50.epsilon",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end",
            "Production": "optional_statment -> ."
        }
    ],
    "51.kernel": [
        {
            "Lookahead": "51.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> varible := . expr"
        }
    ],
    "52.kernel": [
        {
            "Lookahead": "52.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> if expr . then statment else statment"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> if expr . then statment"
        }
    ],
    "53.kernel": [
        {
            "Lookahead": "53.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then do end. ; end ) , ] else to downto",
            "Production": "expr -> simple_expr ."
        },
        {
            "Lookahead": "then do end. ; end ) , ] else to downto",
            "Production": "expr -> simple_expr . relop simple_expr"
        },
        {
            "Lookahead": "then < <= <> = >= > + - or do end. ; end ) , ] else to downto",
            "Production": "simple_expr -> simple_expr . addop term"
        }
    ],
    "54.kernel": [
        {
            "Lookahead": "54.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > + - or do end. ; end ) , ] else to downto",
            "Production": "simple_expr -> term ."
        },
        {
            "Lookahead": "then < <= <> = >= > * / div mod and + - or do end. ; end ) , ] else to downto",
            "Production": "term -> term . mulop factor"
        }
    ],
    "55.kernel": [
        {
            "Lookahead": "55.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > + - or do end. ; end ) , ] else to downto",
            "Production": "simple_expr -> sign . term"
        }
    ],
    "56.kernel": [
        {
            "Lookahead": "56.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > * / div mod and + - or do end. ; end ) , ] else to downto",
            "Production": "term -> factor ."
        }
    ],
    "57.kernel": [
        {
            "Lookahead": "57.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "id int float string boolean ( not",
            "Production": "sign -> + ."
        }
    ],
    "58.kernel": [
        {
            "Lookahead": "58.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "id int float string boolean ( not",
            "Production": "sign -> - ."
        }
    ],
    "59.kernel": [
        {
            "Lookahead": "59.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > * / div mod and + - or do end. ; end ) , ] else to downto",
            "Production": "factor -> id ."
        },
        {
            "Lookahead": "then < <= <> = >= > * / div mod and + - or do end. ; end ) , ] else to downto",
            "Production": "factor -> id . ( expr_list )"
        }
    ],
    "60.kernel": [
        {
            "Lookahead": "60.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > * / div mod and + - or do end. ; end ) , ] else to downto",
            "Production": "factor -> int ."
        }
    ],
    "61.kernel": [
        {
            "Lookahead": "61.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > * / div mod and + - or do end. ; end ) , ] else to downto",
            "Production": "factor -> float ."
        }
    ],
    "62.kernel": [
        {
            "Lookahead": "62.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > * / div mod and + - or do end. ; end ) , ] else to downto",
            "Production": "factor -> string ."
        }
    ],
    "63.kernel": [
        {
            "Lookahead": "63.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > * / div mod and + - or do end. ; end ) , ] else to downto",
            "Production": "factor -> boolean ."
        }
    ],
    "64.kernel": [
        {
            "Lookahead": "64.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > * / div mod and + - or do end. ; end ) , ] else to downto",
            "Production": "factor -> ( . expr )"
        }
    ],
    "65.kernel": [
        {
            "Lookahead": "65.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > * / div mod and + - or do end. ; end ) , ] else to downto",
            "Production": "factor -> not . factor"
        }
    ],
    "66.kernel": [
        {
            "Lookahead": "66.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> while expr . do statment"
        }
    ],
    "67.kernel": [
        {
            "Lookahead": "67.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> for varible . := expr st_for st_for2 do statment"
        }
    ],
    "68.kernel": [
        {
            "Lookahead": "68.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ":=",
            "Production": "varible -> id ."
        },
        {
            "Lookahead": ":=",
            "Production": "varible -> id . [ expr ]"
        }
    ],
    "69.kernel": [
        {
            "Lookahead": "69.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "procedure_statment -> id ( . expr_list )"
        }
    ],
    "69.epsilon": [
        {
            "Lookahead": "69.epsilon",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ") ,",
            "Production": "expr_list -> ."
        }
    ],
    "70.kernel": [
        {
            "Lookahead": "70.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ":=",
            "Production": "varible -> id [ . expr ]"
        }
    ],
    "71.kernel": [
        {
            "Lookahead": "71.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; function procedure end else",
            "Production": "compound_statment -> begin optional_statment . end"
        }
    ],
    "72.kernel": [
        {
            "Lookahead": "72.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "var begin",
            "Production": "supprogram_head -> function id arguments : . standard_type ;"
        }
    ],
    "73.kernel": [
        {
            "Lookahead": "73.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ": ;",
            "Production": "arguments -> ( parameter_list . )"
        },
        {
            "Lookahead": ") ;",
            "Production": "parameter_list -> parameter_list . ; id_list : type"
        }
    ],
    "74.kernel": [
        {
            "Lookahead": "74.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ") ;",
            "Production": "parameter_list -> id_list . : type"
        },
        {
            "Lookahead": ": ,",
            "Production": "id_list -> id_list . , id"
        }
    ],
    "75.kernel": [
        {
            "Lookahead": "75.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "var begin",
            "Production": "supprogram_head -> procedure id arguments ; ."
        }
    ],
    "76.kernel": [
        {
            "Lookahead": "76.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "function procedure begin var",
            "Production": "declarations -> declarations var id_list : type ; ."
        }
    ],
    "77.kernel": [
        {
            "Lookahead": "77.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "; )",
            "Production": "type -> array [ . int .. int ] of standard_type"
        }
    ],
    "78.kernel": [
        {
            "Lookahead": "78.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end",
            "Production": "statment_list -> statment_list ; optional_statment ."
        }
    ],
    "79.kernel": [
        {
            "Lookahead": "79.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> varible := expr ."
        }
    ],
    "80.kernel": [
        {
            "Lookahead": "80.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> if expr then . statment"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> if expr then . statment else statment"
        }
    ],
    "81.kernel": [
        {
            "Lookahead": "81.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > + - or do end. ; end ) , ] else to downto",
            "Production": "simple_expr -> simple_expr addop . term"
        }
    ],
    "82.kernel": [
        {
            "Lookahead": "82.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then do end. ; end ) , ] else to downto",
            "Production": "expr -> simple_expr relop . simple_expr"
        }
    ],
    "83.kernel": [
        {
            "Lookahead": "83.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "+ - id int float string boolean ( not",
            "Production": "relop -> < ."
        }
    ],
    "84.kernel": [
        {
            "Lookahead": "84.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "+ - id int float string boolean ( not",
            "Production": "relop -> <= ."
        }
    ],
    "85.kernel": [
        {
            "Lookahead": "85.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "+ - id int float string boolean ( not",
            "Production": "relop -> <> ."
        }
    ],
    "86.kernel": [
        {
            "Lookahead": "86.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "+ - id int float string boolean ( not",
            "Production": "relop -> = ."
        }
    ],
    "87.kernel": [
        {
            "Lookahead": "87.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "+ - id int float string boolean ( not",
            "Production": "relop -> >= ."
        }
    ],
    "88.kernel": [
        {
            "Lookahead": "88.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "+ - id int float string boolean ( not",
            "Production": "relop -> > ."
        }
    ],
    "89.kernel": [
        {
            "Lookahead": "89.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "id int float string boolean ( not",
            "Production": "addop -> + ."
        }
    ],
    "90.kernel": [
        {
            "Lookahead": "90.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "id int float string boolean ( not",
            "Production": "addop -> - ."
        }
    ],
    "91.kernel": [
        {
            "Lookahead": "91.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "id int float string boolean ( not",
            "Production": "addop -> or ."
        }
    ],
    "92.kernel": [
        {
            "Lookahead": "92.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > * / div mod and + - or do end. ; end ) , ] else to downto",
            "Production": "term -> term mulop . factor"
        }
    ],
    "93.kernel": [
        {
            "Lookahead": "93.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "id int float string boolean ( not",
            "Production": "mulop -> * ."
        }
    ],
    "94.kernel": [
        {
            "Lookahead": "94.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "id int float string boolean ( not",
            "Production": "mulop -> / ."
        }
    ],
    "95.kernel": [
        {
            "Lookahead": "95.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "id int float string boolean ( not",
            "Production": "mulop -> div ."
        }
    ],
    "96.kernel": [
        {
            "Lookahead": "96.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "id int float string boolean ( not",
            "Production": "mulop -> mod ."
        }
    ],
    "97.kernel": [
        {
            "Lookahead": "97.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "id int float string boolean ( not",
            "Production": "mulop -> and ."
        }
    ],
    "98.kernel": [
        {
            "Lookahead": "98.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > + - or do end. ; end ) , ] else to downto",
            "Production": "simple_expr -> sign term ."
        },
        {
            "Lookahead": "then < <= <> = >= > + - or do end. ; end * / div mod and ) , ] else to downto",
            "Production": "term -> term . mulop factor"
        }
    ],
    "99.kernel": [
        {
            "Lookahead": "99.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > * / div mod and + - or do end. ; end ) , ] else to downto",
            "Production": "factor -> id ( . expr_list )"
        }
    ],
    "99.epsilon": [
        {
            "Lookahead": "99.epsilon",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ") ,",
            "Production": "expr_list -> ."
        }
    ],
    "100.kernel": [
        {
            "Lookahead": "100.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > * / div mod and + - or do end. ; end ) , ] else to downto",
            "Production": "factor -> ( expr . )"
        }
    ],
    "101.kernel": [
        {
            "Lookahead": "101.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > * / div mod and + - or do end. ; end ) , ] else to downto",
            "Production": "factor -> not factor ."
        }
    ],
    "102.kernel": [
        {
            "Lookahead": "102.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> while expr do . statment"
        }
    ],
    "103.kernel": [
        {
            "Lookahead": "103.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> for varible := . expr st_for st_for2 do statment"
        }
    ],
    "104.kernel": [
        {
            "Lookahead": "104.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "procedure_statment -> id ( expr_list . )"
        },
        {
            "Lookahead": ") ,",
            "Production": "expr_list -> expr_list . , expr"
        }
    ],
    "105.kernel": [
        {
            "Lookahead": "105.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ") ,",
            "Production": "expr_list -> expr ."
        }
    ],
    "106.kernel": [
        {
            "Lookahead": "106.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ":=",
            "Production": "varible -> id [ expr . ]"
        }
    ],
    "107.kernel": [
        {
            "Lookahead": "107.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; function procedure end else",
            "Production": "compound_statment -> begin optional_statment end ."
        }
    ],
    "108.kernel": [
        {
            "Lookahead": "108.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "var begin",
            "Production": "supprogram_head -> function id arguments : standard_type . ;"
        }
    ],
    "109.kernel": [
        {
            "Lookahead": "109.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ") ;",
            "Production": "parameter_list -> parameter_list ; . id_list : type"
        }
    ],
    "110.kernel": [
        {
            "Lookahead": "110.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ": ;",
            "Production": "arguments -> ( parameter_list ) ."
        }
    ],
    "111.kernel": [
        {
            "Lookahead": "111.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ") ;",
            "Production": "parameter_list -> id_list : . type"
        }
    ],
    "112.kernel": [
        {
            "Lookahead": "112.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "; )",
            "Production": "type -> array [ int . .. int ] of standard_type"
        }
    ],
    "113.kernel": [
        {
            "Lookahead": "113.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> if expr then statment . else statment"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> if expr then statment ."
        }
    ],
    "114.kernel": [
        {
            "Lookahead": "114.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > + - or do end. ; end ) , ] else to downto",
            "Production": "simple_expr -> simple_expr addop term ."
        },
        {
            "Lookahead": "then < <= <> = >= > + - or do end. ; end ) , ] else * / div mod and to downto",
            "Production": "term -> term . mulop factor"
        }
    ],
    "115.kernel": [
        {
            "Lookahead": "115.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then do end. ; end ) , ] else to downto",
            "Production": "expr -> simple_expr relop simple_expr ."
        },
        {
            "Lookahead": "then do end. ; end ) , ] else + - or to downto",
            "Production": "simple_expr -> simple_expr . addop term"
        }
    ],
    "116.kernel": [
        {
            "Lookahead": "116.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > * / div mod and + - or do end. ; end ) , ] else to downto",
            "Production": "term -> term mulop factor ."
        }
    ],
    "117.kernel": [
        {
            "Lookahead": "117.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > * / div mod and + - or do end. ; end ) , ] else to downto",
            "Production": "factor -> id ( expr_list . )"
        },
        {
            "Lookahead": ") ,",
            "Production": "expr_list -> expr_list . , expr"
        }
    ],
    "118.kernel": [
        {
            "Lookahead": "118.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > * / div mod and + - or do end. ; end ) , ] else to downto",
            "Production": "factor -> ( expr ) ."
        }
    ],
    "119.kernel": [
        {
            "Lookahead": "119.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> while expr do statment ."
        }
    ],
    "120.kernel": [
        {
            "Lookahead": "120.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> for varible := expr . st_for st_for2 do statment"
        }
    ],
    "121.kernel": [
        {
            "Lookahead": "121.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ") ,",
            "Production": "expr_list -> expr_list , . expr"
        }
    ],
    "122.kernel": [
        {
            "Lookahead": "122.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "procedure_statment -> id ( expr_list ) ."
        }
    ],
    "123.kernel": [
        {
            "Lookahead": "123.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ":=",
            "Production": "varible -> id [ expr ] ."
        }
    ],
    "124.kernel": [
        {
            "Lookahead": "124.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "var begin",
            "Production": "supprogram_head -> function id arguments : standard_type ; ."
        }
    ],
    "125.kernel": [
        {
            "Lookahead": "125.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ") ;",
            "Production": "parameter_list -> parameter_list ; id_list . : type"
        },
        {
            "Lookahead": ": ,",
            "Production": "id_list -> id_list . , id"
        }
    ],
    "126.kernel": [
        {
            "Lookahead": "126.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ") ;",
            "Production": "parameter_list -> id_list : type ."
        }
    ],
    "127.kernel": [
        {
            "Lookahead": "127.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "; )",
            "Production": "type -> array [ int .. . int ] of standard_type"
        }
    ],
    "128.kernel": [
        {
            "Lookahead": "128.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> if expr then statment else . statment"
        }
    ],
    "129.kernel": [
        {
            "Lookahead": "129.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "then < <= <> = >= > * / div mod and + - or do end. ; end ) , ] else to downto",
            "Production": "factor -> id ( expr_list ) ."
        }
    ],
    "130.kernel": [
        {
            "Lookahead": "130.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> for varible := expr st_for . st_for2 do statment"
        }
    ],
    "131.kernel": [
        {
            "Lookahead": "131.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "id int",
            "Production": "st_for -> to ."
        }
    ],
    "132.kernel": [
        {
            "Lookahead": "132.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "id int",
            "Production": "st_for -> downto ."
        }
    ],
    "133.kernel": [
        {
            "Lookahead": "133.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ") ,",
            "Production": "expr_list -> expr_list , expr ."
        }
    ],
    "134.kernel": [
        {
            "Lookahead": "134.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ") ;",
            "Production": "parameter_list -> parameter_list ; id_list : . type"
        }
    ],
    "135.kernel": [
        {
            "Lookahead": "135.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "; )",
            "Production": "type -> array [ int .. int . ] of standard_type"
        }
    ],
    "136.kernel": [
        {
            "Lookahead": "136.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> if expr then statment else statment ."
        }
    ],
    "137.kernel": [
        {
            "Lookahead": "137.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> for varible := expr st_for st_for2 . do statment"
        }
    ],
    "138.kernel": [
        {
            "Lookahead": "138.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "do",
            "Production": "st_for2 -> id ."
        }
    ],
    "139.kernel": [
        {
            "Lookahead": "139.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "do",
            "Production": "st_for2 -> int ."
        }
    ],
    "140.kernel": [
        {
            "Lookahead": "140.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": ") ;",
            "Production": "parameter_list -> parameter_list ; id_list : type ."
        }
    ],
    "141.kernel": [
        {
            "Lookahead": "141.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "; )",
            "Production": "type -> array [ int .. int ] . of standard_type"
        }
    ],
    "142.kernel": [
        {
            "Lookahead": "142.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> for varible := expr st_for st_for2 do . statment"
        }
    ],
    "143.kernel": [
        {
            "Lookahead": "143.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "; )",
            "Production": "type -> array [ int .. int ] of . standard_type"
        }
    ],
    "144.kernel": [
        {
            "Lookahead": "144.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "end. ; end else",
            "Production": "statment -> for varible := expr st_for st_for2 do statment ."
        }
    ],
    "145.kernel": [
        {
            "Lookahead": "145.kernel",
            "Production": ""
        },
        {
            "Lookahead": "Lookahead",
            "Production": "Production"
        },
        {
            "Lookahead": "; )",
            "Production": "type -> array [ int .. int ] of standard_type ."
        }
    ]
}
